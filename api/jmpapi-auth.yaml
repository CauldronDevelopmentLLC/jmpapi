---
title: Authorization

help: >
  API Authorization endpoints allow for creating, modifying or deleting users
  and groups.  The login system uses OAuth2 and can support Google, Facebook,
  or GitHub as login providers.

endpoints:
  /.*:
    GET|PUT|POST|DELETE:
      handler: session
      help: Look up session by ID.
      sql: CALL jmpapi.AuthSession(%(session.id)S)

  /login/:provider:
    GET:
      handler: login
      redirect: /admin.html
      args:
        provider:
          optional: true
          enum: [google, facebook, github, providers]
          help: >
            The OAuth2 login provider or ``providers`` to list supported
            providers.

      sql: >
        CALL jmpapi.AuthLogin(%(session.id)S, %(session.provider)S,
          %(session.provider_id)S, %(session.user)S, %(session.name)S,
          %(session.avatar)S)

  /logout:
    PUT:
      handler: logout
      sql: CALL jmpapi.AuthLogout(%(session.id)S)
      help: Close the currently logged in session.

  /config.*:
    allow: [$admin]

  /config:
    GET:
      return: list
      sql: CALL jmpapi.ConfigList()

  /config/:name:
    GET:
      return: one
      sql: CALL jmpapi.ConfigGet(%(name)S)

    PUT:
      args:
        value: {help: "Config value"}
      sql: CALL jmpapi.ConfigSet(%(name)S, %(value)i)

  /users:
    allow: [$admin]

    GET:
      return: list
      sql: CALL jmpapi.UserList()
      help: Returns a list of all users.

    POST:
      return: u64
      args:
        provider:
          enum: [google, facebook, github]
          help: The OAuth2 login provider.
        provider_id: {optional: true, min: 1}
        email: {type: email, help: "The user's email address."}
        name: {optional: true, min: 2, help: "The user's name."}
        avatar:
          optional: true
          type: uri
          help: "A URL pointing to the user's avatar"
        enabled: {type: bool, default: true}

      sql: >
        CALL jmpapi.UserAdd(%(provider)S, %(provider_id)S, %(email)S, %(name)S,
          %(avatar)S, %(enabled)b);
        SELECT @uid;

  /users/:id.*:
    args:
      id: {allow: [$admin, =uid]}

  /users/:id:
    args:
      id: {help: User ID}

    GET:
      fields: ["*", associations, groups]
      help: Get user info.
      sql: CALL jmpapi.UserGet(%(id)u)

    PUT:
      help: Update user settings
      args:
        email: {optional: true, type: email}
        name: {optional: true, min: 2}
        avatar: {optional: true, type: uri}
        enabled: {allow: [$admin], optional: true, type: bool}
      sql: >
        CALL jmpapi.UserSet(%(id)u, %(email)S, %(name)S, %(avatar)S,
          %(enabled)b)

    DELETE:
      help: Delete an existing user.
      sql: CALL jmpapi.UserDelete(%(id)u)

  /users/:id/associations/:provider:
    args:
      id: {help: User ID}
      provider:
        enum: [google, facebook, github]
        help: The OAuth2 login provider.

    PUT:
      help: Add a user login association.
      args:
        provider_id: {optional: true, min: 1}
        email: {optional: true, type: email}
        name: {optional: true, min: 2}
        avatar: {optional: true, type: uri}
      sql: >
        CALL jmpapi.UserAssociationAdd(%(id)u, %(provider)S, %(provider_id)S,
          %(email)S, %(name)S, %(avatar)S)

    DELETE:
      help: Delete a user login association.
      sql: CALL jmpapi.UserAssociationDelete(%(id)u, %(provider)S)

  /users/:id/groups:
    GET:
      allow: [$admin]
      return: list
      sql: CALL jmpapi.UserGroupList(%(id)u)
      help: Get the list of groups with user membership.

  /users/:id/groups/:group:
    PUT:
      allow: [$admin]
      sql: CALL jmpapi.UserGroupAdd(%(id)u, %(group)S)
      help: Add a user to a group.

    DELETE:
      allow: [$admin]
      sql: CALL jmpapi.UserGroupDelete(%(id)u, %(group)S)
      help: Remove a user from a group.

  /groups.*:
    allow: [$admin]

  /groups:
    GET:
      return: list
      sql: CALL jmpapi.GroupList()
      help: Returns the list of groups.

  /groups/:group:
    args:
      group: {help: The group name.}

    PUT:
      sql: CALL jmpapi.GroupAdd(%(group)S)
      help: Create a new group.

    DELETE:
      sql: CALL jmpapi.GroupDelete(%(group)S)
      help: Delete a group.

  /groups/:group/members:
    GET:
      return: list
      sql: CALL jmpapi.GroupMemberList(%(group)S)
      help: Returns a list of members of a group.

  /groups/:group/nonmembers:
    GET:
      return: list
      sql: CALL jmpapi.GroupNonmemberList(%(group)S)
      help: Returns a list of nonmembers of a group.
