---
title: Authorization

help: >
  API Authorization endpoints allow for creating, modifying or deleting users
  and groups.  The login system uses OAuth2 and can support Google, Facebook,
  or GitHub as login providers.

endpoints:
  /.*:
    get|put|post|delete:
      handler: session
      help: Look up session by ID.
      sql: CALL jmpapi.AuthSession({session.id})

  /((login)|(logout)|(config)|(users)|(groups)).*:
    get|put|post|delete:
      handler: pass
      headers: {Cache-Control: max-age=0}

  /login/{provider}:
    args:
      provider:
        enum: [google, facebook, github, providers, '']
        help: >
          The OAuth2 login provider or ``providers`` to list supported
          providers.

    get:
      handler: login
      sql: >
        CALL jmpapi.AuthLogin({session.id}, {session.provider},
          {session.provider_id}, {session.user}, {session.name},
          {session.avatar})

  /logout:
    put:
      handler: logout
      sql: CALL jmpapi.AuthLogout({session.id})
      help: Close the currently logged in session.

  /config:
    allow: [$admin]

    get:
      return: list
      sql: CALL jmpapi.ConfigList()

    /{name}:
      get:
        return: one
        sql: CALL jmpapi.ConfigGet({args.name})

      put:
        args:
          value: {}
        sql: CALL jmpapi.ConfigSet({args.name}, {args.value})

  /users:
    get:
      allow: [$admin]
      return: list
      sql: CALL jmpapi.UserList()
      help: Returns a list of all users.

    post:
      return: u64
      allow: [$admin]
      args:
        provider:
          enum: [google, facebook, github]
          help: The OAuth2 login provider.
        provider_id: {optional: true, min: 1}
        email: {type: email, help: "The user's email address."}
        name: {optional: true, min: 2, help: "The user's name."}
        avatar:
          optional: true
          type: uri
          help: "A URL pointing to the user's avatar"
        enabled: {type: bool, default: true}

      sql: >
        CALL jmpapi.UserAdd({args.provider}, {args.provider_id},
          {args.email}, {args.name}, {args.avatar}, {args.enabled});
        SELECT @uid;

    /{id}:
      args:
        id:
          help: User ID
          allow: [$admin, =uid]

      get:
        fields: ["*", associations, groups]
        help: Get user info.
        sql: CALL jmpapi.UserGet({args.id})

      put:
        help: Update user settings
        args:
          email: {optional: true, type: email}
          name: {optional: true, min: 2}
          avatar: {optional: true, type: uri}
          enabled: {allow: [$admin], optional: true, type: bool}
        sql: >
          CALL jmpapi.UserSet({args.id}, {args.email}, {args.name},
            {args.avatar}, {args.enabled})

      delete:
        help: Delete an existing user.
        sql: CALL jmpapi.UserDelete({args.id})

      /associations/{provider}:
        args:
          provider:
            enum: [google, facebook, github]
            help: The OAuth2 login provider.

        put:
          help: Add a user login association.
          args:
            provider_id: {optional: true, min: 1}
            email: {optional: true, type: email}
            name: {optional: true, min: 2}
            avatar: {optional: true, type: uri}
          sql: >
            CALL jmpapi.UserAssociationAdd({args.id}, {args.provider},
              {args.provider_id}, {args.email}, {args.name},
              {args.avatar})

        delete:
          help: Delete a user login association.
          sql: CALL jmpapi.UserAssociationDelete({args.id}, {args.provider})

      /groups:
        allow: [$admin]

        get:
          return: list
          sql: CALL jmpapi.UserGroupList({args.id})
          help: Get the list of groups with user membership.

        /{group}:
          put:
            sql: CALL jmpapi.UserGroupAdd({args.id}, {args.group})
            help: Add a user to a group.

          delete:
            sql: CALL jmpapi.UserGroupDelete({args.id}, {args.group})
            help: Remove a user from a group.

  /groups:
    allow: [$admin]

    get:
      return: list
      sql: CALL jmpapi.GroupList()
      help: Returns the list of groups.

    /{group}:
      args:
        group: {help: The group name.}

      put:
        sql: CALL jmpapi.GroupAdd({args.group})
        help: Create a new group.

      delete:
        sql: CALL jmpapi.GroupDelete({args.group})
        help: Delete a group.

      /members:
        get:
          return: list
          sql: CALL jmpapi.GroupMemberList({args.group})
          help: Returns a list of members of a group.

      /nonmembers:
        get:
          return: list
          sql: CALL jmpapi.GroupNonmemberList({args.group})
          help: Returns a list of nonmembers of a group.
