title: JmpAPI Docs

options:
  http-addresses: [127.0.0.1:7000]
  http-root: /usr/share/jmpapi/http
  session-sql: CALL GetSession(%(id)s)
  jsonp: callback

api:
  /.*:
    ANY:
      handler: pass
      headers:
        Access-Control-Allow-Origin: "*"
        Access-Control-Allow-Methods: POST,PUT,GET,OPTIONS,DELETE
        Access-Control-Allow-Headers: >
          DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,
          Content-Type,Range

  /api:
    GET:
      handler: api
      help: Returns a description of this API.

  /login/:provider:
    GET:
      handler: login
      redirect: /admin.html
      args:
        provider:
          optional: true
          enum: [google, facebook, github, providers]
          help: The OAuth2 login provider.

      sql: CALL Login(%(id)s, %(provider)s, %(user)s, %(name)s, %(avatar)s)

  /logout:
    PUT:
      handler: logout
      sql: CALL Logout(%(id)s)
      help: Close the currently logged in session.

  /users:
    GET:
      allow: [$admin]
      return: list
      sql: >
        SELECT id, provider, name, avatar, email, created, last_used
          FROM jmpapi.users
      help: Returns a list of all users.

    POST:
      allow: [$admin]
      args:
        provider:
          enum: [google, facebook, github]
          help: The OAuth2 login provider.

        email:
          help: "The user's email address."

        name:
          help: "The user's name."

      sql: CALL AddUser(%(provider)s, %(email)s, %(name)s)

  /users/:id:
    DELETE:
      allow: [$admin]
      return: ok
      sql: DELETE FROM jmpapi.users WHERE id = %(id)s
      help: Delete an existing user.
      args:
        id: {help: User ID}

  /users/:id/groups:
    GET:
      allow: [$admin]
      return: list
      sql: >
        SELECT g.name, COUNT(ug.uid) member FROM jmpapi.groups g
          LEFT JOIN jmpapi.user_groups ug ON ug.gid = g.id AND ug.uid = %(id)s
          GROUP BY g.name
      help: Get the list of groups with user membership.

  /users/:id/groups/:group:
    PUT:
      allow: [$admin]
      return: ok
      sql: >
        INSERT INTO jmpapi.user_groups (uid, gid)
          SELECT %(id)s, id FROM jmpapi.groups WHERE name = %(group)s
      help: Add a user to a group.

    DELETE:
      allow: [$admin]
      return: ok
      sql: >
        DELETE FROM jmpapi.user_groups
          WHERE uid = %(id)s AND gid IN
            (SELECT id FROM jmpapi.groups WHERE name = %(group)s)
      help: Remove a user from a group.

  /groups:
    GET:
      allow: [$admin]
      return: list
      sql: SELECT name FROM jmpapi.groups
      help: Returns the list of groups.

  /groups/:group:
    args:
      group: {help: The group name.}

    PUT:
      allow: [$admin]
      return: ok
      sql: INSERT INTO jmpapi.groups (name) VALUES (%(group)s)
      help: Create a new group.

    DELETE:
      allow: [$admin]
      return: ok
      sql: DELETE FROM jmpapi.groups WHERE name = %(group)s AND name != 'admin'
      help: Delete a group.

  /groups/:group/users:
    GET:
      allow: [$admin]
      return: list
      sql: >
        SELECT uid id, provider, u.name, avatar, created, last_used
          FROM jmpapi.user_groups ug
          JOIN jmpapi.groups g ON g.id = ug.gid AND g.name = %(group)s
          JOIN jmpapi.users u ON u.id = ug.uid
      help: Returns a list of users in a group.
